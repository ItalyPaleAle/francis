//go:build unit

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package components_mocks

import (
	"context"
	"time"

	"github.com/italypaleale/francis/components"
	"github.com/italypaleale/francis/internal/ref"
	mock "github.com/stretchr/testify/mock"
)

// NewMockActorProvider creates a new instance of MockActorProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockActorProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockActorProvider {
	mock := &MockActorProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockActorProvider is an autogenerated mock type for the ActorProvider type
type MockActorProvider struct {
	mock.Mock
}

type MockActorProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockActorProvider) EXPECT() *MockActorProvider_Expecter {
	return &MockActorProvider_Expecter{mock: &_m.Mock}
}

// DeleteAlarm provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) DeleteAlarm(ctx context.Context, ref1 ref.AlarmRef) error {
	ret := _mock.Called(ctx, ref1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlarm")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ref.AlarmRef) error); ok {
		r0 = returnFunc(ctx, ref1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockActorProvider_DeleteAlarm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlarm'
type MockActorProvider_DeleteAlarm_Call struct {
	*mock.Call
}

// DeleteAlarm is a helper method to define mock.On call
//   - ctx context.Context
//   - ref1 ref.AlarmRef
func (_e *MockActorProvider_Expecter) DeleteAlarm(ctx interface{}, ref1 interface{}) *MockActorProvider_DeleteAlarm_Call {
	return &MockActorProvider_DeleteAlarm_Call{Call: _e.mock.On("DeleteAlarm", ctx, ref1)}
}

func (_c *MockActorProvider_DeleteAlarm_Call) Run(run func(ctx context.Context, ref1 ref.AlarmRef)) *MockActorProvider_DeleteAlarm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ref.AlarmRef
		if args[1] != nil {
			arg1 = args[1].(ref.AlarmRef)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockActorProvider_DeleteAlarm_Call) Return(err error) *MockActorProvider_DeleteAlarm_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockActorProvider_DeleteAlarm_Call) RunAndReturn(run func(ctx context.Context, ref1 ref.AlarmRef) error) *MockActorProvider_DeleteAlarm_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLeasedAlarm provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) DeleteLeasedAlarm(ctx context.Context, lease *ref.AlarmLease) error {
	ret := _mock.Called(ctx, lease)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLeasedAlarm")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ref.AlarmLease) error); ok {
		r0 = returnFunc(ctx, lease)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockActorProvider_DeleteLeasedAlarm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLeasedAlarm'
type MockActorProvider_DeleteLeasedAlarm_Call struct {
	*mock.Call
}

// DeleteLeasedAlarm is a helper method to define mock.On call
//   - ctx context.Context
//   - lease *ref.AlarmLease
func (_e *MockActorProvider_Expecter) DeleteLeasedAlarm(ctx interface{}, lease interface{}) *MockActorProvider_DeleteLeasedAlarm_Call {
	return &MockActorProvider_DeleteLeasedAlarm_Call{Call: _e.mock.On("DeleteLeasedAlarm", ctx, lease)}
}

func (_c *MockActorProvider_DeleteLeasedAlarm_Call) Run(run func(ctx context.Context, lease *ref.AlarmLease)) *MockActorProvider_DeleteLeasedAlarm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ref.AlarmLease
		if args[1] != nil {
			arg1 = args[1].(*ref.AlarmLease)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockActorProvider_DeleteLeasedAlarm_Call) Return(err error) *MockActorProvider_DeleteLeasedAlarm_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockActorProvider_DeleteLeasedAlarm_Call) RunAndReturn(run func(ctx context.Context, lease *ref.AlarmLease) error) *MockActorProvider_DeleteLeasedAlarm_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteState provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) DeleteState(ctx context.Context, ref1 ref.ActorRef) error {
	ret := _mock.Called(ctx, ref1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteState")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ref.ActorRef) error); ok {
		r0 = returnFunc(ctx, ref1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockActorProvider_DeleteState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteState'
type MockActorProvider_DeleteState_Call struct {
	*mock.Call
}

// DeleteState is a helper method to define mock.On call
//   - ctx context.Context
//   - ref1 ref.ActorRef
func (_e *MockActorProvider_Expecter) DeleteState(ctx interface{}, ref1 interface{}) *MockActorProvider_DeleteState_Call {
	return &MockActorProvider_DeleteState_Call{Call: _e.mock.On("DeleteState", ctx, ref1)}
}

func (_c *MockActorProvider_DeleteState_Call) Run(run func(ctx context.Context, ref1 ref.ActorRef)) *MockActorProvider_DeleteState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ref.ActorRef
		if args[1] != nil {
			arg1 = args[1].(ref.ActorRef)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockActorProvider_DeleteState_Call) Return(err error) *MockActorProvider_DeleteState_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockActorProvider_DeleteState_Call) RunAndReturn(run func(ctx context.Context, ref1 ref.ActorRef) error) *MockActorProvider_DeleteState_Call {
	_c.Call.Return(run)
	return _c
}

// FetchAndLeaseUpcomingAlarms provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) FetchAndLeaseUpcomingAlarms(ctx context.Context, req components.FetchAndLeaseUpcomingAlarmsReq) ([]*ref.AlarmLease, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for FetchAndLeaseUpcomingAlarms")
	}

	var r0 []*ref.AlarmLease
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, components.FetchAndLeaseUpcomingAlarmsReq) ([]*ref.AlarmLease, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, components.FetchAndLeaseUpcomingAlarmsReq) []*ref.AlarmLease); ok {
		r0 = returnFunc(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ref.AlarmLease)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, components.FetchAndLeaseUpcomingAlarmsReq) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockActorProvider_FetchAndLeaseUpcomingAlarms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FetchAndLeaseUpcomingAlarms'
type MockActorProvider_FetchAndLeaseUpcomingAlarms_Call struct {
	*mock.Call
}

// FetchAndLeaseUpcomingAlarms is a helper method to define mock.On call
//   - ctx context.Context
//   - req components.FetchAndLeaseUpcomingAlarmsReq
func (_e *MockActorProvider_Expecter) FetchAndLeaseUpcomingAlarms(ctx interface{}, req interface{}) *MockActorProvider_FetchAndLeaseUpcomingAlarms_Call {
	return &MockActorProvider_FetchAndLeaseUpcomingAlarms_Call{Call: _e.mock.On("FetchAndLeaseUpcomingAlarms", ctx, req)}
}

func (_c *MockActorProvider_FetchAndLeaseUpcomingAlarms_Call) Run(run func(ctx context.Context, req components.FetchAndLeaseUpcomingAlarmsReq)) *MockActorProvider_FetchAndLeaseUpcomingAlarms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 components.FetchAndLeaseUpcomingAlarmsReq
		if args[1] != nil {
			arg1 = args[1].(components.FetchAndLeaseUpcomingAlarmsReq)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockActorProvider_FetchAndLeaseUpcomingAlarms_Call) Return(alarmLeases []*ref.AlarmLease, err error) *MockActorProvider_FetchAndLeaseUpcomingAlarms_Call {
	_c.Call.Return(alarmLeases, err)
	return _c
}

func (_c *MockActorProvider_FetchAndLeaseUpcomingAlarms_Call) RunAndReturn(run func(ctx context.Context, req components.FetchAndLeaseUpcomingAlarmsReq) ([]*ref.AlarmLease, error)) *MockActorProvider_FetchAndLeaseUpcomingAlarms_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlarm provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) GetAlarm(ctx context.Context, ref1 ref.AlarmRef) (components.GetAlarmRes, error) {
	ret := _mock.Called(ctx, ref1)

	if len(ret) == 0 {
		panic("no return value specified for GetAlarm")
	}

	var r0 components.GetAlarmRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ref.AlarmRef) (components.GetAlarmRes, error)); ok {
		return returnFunc(ctx, ref1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ref.AlarmRef) components.GetAlarmRes); ok {
		r0 = returnFunc(ctx, ref1)
	} else {
		r0 = ret.Get(0).(components.GetAlarmRes)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ref.AlarmRef) error); ok {
		r1 = returnFunc(ctx, ref1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockActorProvider_GetAlarm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlarm'
type MockActorProvider_GetAlarm_Call struct {
	*mock.Call
}

// GetAlarm is a helper method to define mock.On call
//   - ctx context.Context
//   - ref1 ref.AlarmRef
func (_e *MockActorProvider_Expecter) GetAlarm(ctx interface{}, ref1 interface{}) *MockActorProvider_GetAlarm_Call {
	return &MockActorProvider_GetAlarm_Call{Call: _e.mock.On("GetAlarm", ctx, ref1)}
}

func (_c *MockActorProvider_GetAlarm_Call) Run(run func(ctx context.Context, ref1 ref.AlarmRef)) *MockActorProvider_GetAlarm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ref.AlarmRef
		if args[1] != nil {
			arg1 = args[1].(ref.AlarmRef)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockActorProvider_GetAlarm_Call) Return(getAlarmRes components.GetAlarmRes, err error) *MockActorProvider_GetAlarm_Call {
	_c.Call.Return(getAlarmRes, err)
	return _c
}

func (_c *MockActorProvider_GetAlarm_Call) RunAndReturn(run func(ctx context.Context, ref1 ref.AlarmRef) (components.GetAlarmRes, error)) *MockActorProvider_GetAlarm_Call {
	_c.Call.Return(run)
	return _c
}

// GetLeasedAlarm provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) GetLeasedAlarm(ctx context.Context, lease *ref.AlarmLease) (components.GetLeasedAlarmRes, error) {
	ret := _mock.Called(ctx, lease)

	if len(ret) == 0 {
		panic("no return value specified for GetLeasedAlarm")
	}

	var r0 components.GetLeasedAlarmRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ref.AlarmLease) (components.GetLeasedAlarmRes, error)); ok {
		return returnFunc(ctx, lease)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ref.AlarmLease) components.GetLeasedAlarmRes); ok {
		r0 = returnFunc(ctx, lease)
	} else {
		r0 = ret.Get(0).(components.GetLeasedAlarmRes)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *ref.AlarmLease) error); ok {
		r1 = returnFunc(ctx, lease)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockActorProvider_GetLeasedAlarm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLeasedAlarm'
type MockActorProvider_GetLeasedAlarm_Call struct {
	*mock.Call
}

// GetLeasedAlarm is a helper method to define mock.On call
//   - ctx context.Context
//   - lease *ref.AlarmLease
func (_e *MockActorProvider_Expecter) GetLeasedAlarm(ctx interface{}, lease interface{}) *MockActorProvider_GetLeasedAlarm_Call {
	return &MockActorProvider_GetLeasedAlarm_Call{Call: _e.mock.On("GetLeasedAlarm", ctx, lease)}
}

func (_c *MockActorProvider_GetLeasedAlarm_Call) Run(run func(ctx context.Context, lease *ref.AlarmLease)) *MockActorProvider_GetLeasedAlarm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ref.AlarmLease
		if args[1] != nil {
			arg1 = args[1].(*ref.AlarmLease)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockActorProvider_GetLeasedAlarm_Call) Return(getLeasedAlarmRes components.GetLeasedAlarmRes, err error) *MockActorProvider_GetLeasedAlarm_Call {
	_c.Call.Return(getLeasedAlarmRes, err)
	return _c
}

func (_c *MockActorProvider_GetLeasedAlarm_Call) RunAndReturn(run func(ctx context.Context, lease *ref.AlarmLease) (components.GetLeasedAlarmRes, error)) *MockActorProvider_GetLeasedAlarm_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) GetState(ctx context.Context, ref1 ref.ActorRef) ([]byte, error) {
	ret := _mock.Called(ctx, ref1)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ref.ActorRef) ([]byte, error)); ok {
		return returnFunc(ctx, ref1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ref.ActorRef) []byte); ok {
		r0 = returnFunc(ctx, ref1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ref.ActorRef) error); ok {
		r1 = returnFunc(ctx, ref1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockActorProvider_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type MockActorProvider_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - ctx context.Context
//   - ref1 ref.ActorRef
func (_e *MockActorProvider_Expecter) GetState(ctx interface{}, ref1 interface{}) *MockActorProvider_GetState_Call {
	return &MockActorProvider_GetState_Call{Call: _e.mock.On("GetState", ctx, ref1)}
}

func (_c *MockActorProvider_GetState_Call) Run(run func(ctx context.Context, ref1 ref.ActorRef)) *MockActorProvider_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ref.ActorRef
		if args[1] != nil {
			arg1 = args[1].(ref.ActorRef)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockActorProvider_GetState_Call) Return(bytes []byte, err error) *MockActorProvider_GetState_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockActorProvider_GetState_Call) RunAndReturn(run func(ctx context.Context, ref1 ref.ActorRef) ([]byte, error)) *MockActorProvider_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheckInterval provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) HealthCheckInterval() time.Duration {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthCheckInterval")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// MockActorProvider_HealthCheckInterval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheckInterval'
type MockActorProvider_HealthCheckInterval_Call struct {
	*mock.Call
}

// HealthCheckInterval is a helper method to define mock.On call
func (_e *MockActorProvider_Expecter) HealthCheckInterval() *MockActorProvider_HealthCheckInterval_Call {
	return &MockActorProvider_HealthCheckInterval_Call{Call: _e.mock.On("HealthCheckInterval")}
}

func (_c *MockActorProvider_HealthCheckInterval_Call) Run(run func()) *MockActorProvider_HealthCheckInterval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockActorProvider_HealthCheckInterval_Call) Return(duration time.Duration) *MockActorProvider_HealthCheckInterval_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *MockActorProvider_HealthCheckInterval_Call) RunAndReturn(run func() time.Duration) *MockActorProvider_HealthCheckInterval_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) Init(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockActorProvider_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockActorProvider_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockActorProvider_Expecter) Init(ctx interface{}) *MockActorProvider_Init_Call {
	return &MockActorProvider_Init_Call{Call: _e.mock.On("Init", ctx)}
}

func (_c *MockActorProvider_Init_Call) Run(run func(ctx context.Context)) *MockActorProvider_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockActorProvider_Init_Call) Return(err error) *MockActorProvider_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockActorProvider_Init_Call) RunAndReturn(run func(ctx context.Context) error) *MockActorProvider_Init_Call {
	_c.Call.Return(run)
	return _c
}

// LookupActor provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) LookupActor(ctx context.Context, ref1 ref.ActorRef, opts components.LookupActorOpts) (components.LookupActorRes, error) {
	ret := _mock.Called(ctx, ref1, opts)

	if len(ret) == 0 {
		panic("no return value specified for LookupActor")
	}

	var r0 components.LookupActorRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ref.ActorRef, components.LookupActorOpts) (components.LookupActorRes, error)); ok {
		return returnFunc(ctx, ref1, opts)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, ref.ActorRef, components.LookupActorOpts) components.LookupActorRes); ok {
		r0 = returnFunc(ctx, ref1, opts)
	} else {
		r0 = ret.Get(0).(components.LookupActorRes)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, ref.ActorRef, components.LookupActorOpts) error); ok {
		r1 = returnFunc(ctx, ref1, opts)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockActorProvider_LookupActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupActor'
type MockActorProvider_LookupActor_Call struct {
	*mock.Call
}

// LookupActor is a helper method to define mock.On call
//   - ctx context.Context
//   - ref1 ref.ActorRef
//   - opts components.LookupActorOpts
func (_e *MockActorProvider_Expecter) LookupActor(ctx interface{}, ref1 interface{}, opts interface{}) *MockActorProvider_LookupActor_Call {
	return &MockActorProvider_LookupActor_Call{Call: _e.mock.On("LookupActor", ctx, ref1, opts)}
}

func (_c *MockActorProvider_LookupActor_Call) Run(run func(ctx context.Context, ref1 ref.ActorRef, opts components.LookupActorOpts)) *MockActorProvider_LookupActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ref.ActorRef
		if args[1] != nil {
			arg1 = args[1].(ref.ActorRef)
		}
		var arg2 components.LookupActorOpts
		if args[2] != nil {
			arg2 = args[2].(components.LookupActorOpts)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockActorProvider_LookupActor_Call) Return(lookupActorRes components.LookupActorRes, err error) *MockActorProvider_LookupActor_Call {
	_c.Call.Return(lookupActorRes, err)
	return _c
}

func (_c *MockActorProvider_LookupActor_Call) RunAndReturn(run func(ctx context.Context, ref1 ref.ActorRef, opts components.LookupActorOpts) (components.LookupActorRes, error)) *MockActorProvider_LookupActor_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterHost provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) RegisterHost(ctx context.Context, req components.RegisterHostReq) (components.RegisterHostRes, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RegisterHost")
	}

	var r0 components.RegisterHostRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, components.RegisterHostReq) (components.RegisterHostRes, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, components.RegisterHostReq) components.RegisterHostRes); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Get(0).(components.RegisterHostRes)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, components.RegisterHostReq) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockActorProvider_RegisterHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterHost'
type MockActorProvider_RegisterHost_Call struct {
	*mock.Call
}

// RegisterHost is a helper method to define mock.On call
//   - ctx context.Context
//   - req components.RegisterHostReq
func (_e *MockActorProvider_Expecter) RegisterHost(ctx interface{}, req interface{}) *MockActorProvider_RegisterHost_Call {
	return &MockActorProvider_RegisterHost_Call{Call: _e.mock.On("RegisterHost", ctx, req)}
}

func (_c *MockActorProvider_RegisterHost_Call) Run(run func(ctx context.Context, req components.RegisterHostReq)) *MockActorProvider_RegisterHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 components.RegisterHostReq
		if args[1] != nil {
			arg1 = args[1].(components.RegisterHostReq)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockActorProvider_RegisterHost_Call) Return(registerHostRes components.RegisterHostRes, err error) *MockActorProvider_RegisterHost_Call {
	_c.Call.Return(registerHostRes, err)
	return _c
}

func (_c *MockActorProvider_RegisterHost_Call) RunAndReturn(run func(ctx context.Context, req components.RegisterHostReq) (components.RegisterHostRes, error)) *MockActorProvider_RegisterHost_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseAlarmLease provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) ReleaseAlarmLease(ctx context.Context, lease *ref.AlarmLease) error {
	ret := _mock.Called(ctx, lease)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseAlarmLease")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ref.AlarmLease) error); ok {
		r0 = returnFunc(ctx, lease)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockActorProvider_ReleaseAlarmLease_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseAlarmLease'
type MockActorProvider_ReleaseAlarmLease_Call struct {
	*mock.Call
}

// ReleaseAlarmLease is a helper method to define mock.On call
//   - ctx context.Context
//   - lease *ref.AlarmLease
func (_e *MockActorProvider_Expecter) ReleaseAlarmLease(ctx interface{}, lease interface{}) *MockActorProvider_ReleaseAlarmLease_Call {
	return &MockActorProvider_ReleaseAlarmLease_Call{Call: _e.mock.On("ReleaseAlarmLease", ctx, lease)}
}

func (_c *MockActorProvider_ReleaseAlarmLease_Call) Run(run func(ctx context.Context, lease *ref.AlarmLease)) *MockActorProvider_ReleaseAlarmLease_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ref.AlarmLease
		if args[1] != nil {
			arg1 = args[1].(*ref.AlarmLease)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockActorProvider_ReleaseAlarmLease_Call) Return(err error) *MockActorProvider_ReleaseAlarmLease_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockActorProvider_ReleaseAlarmLease_Call) RunAndReturn(run func(ctx context.Context, lease *ref.AlarmLease) error) *MockActorProvider_ReleaseAlarmLease_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveActor provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) RemoveActor(ctx context.Context, ref1 ref.ActorRef) error {
	ret := _mock.Called(ctx, ref1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveActor")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ref.ActorRef) error); ok {
		r0 = returnFunc(ctx, ref1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockActorProvider_RemoveActor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveActor'
type MockActorProvider_RemoveActor_Call struct {
	*mock.Call
}

// RemoveActor is a helper method to define mock.On call
//   - ctx context.Context
//   - ref1 ref.ActorRef
func (_e *MockActorProvider_Expecter) RemoveActor(ctx interface{}, ref1 interface{}) *MockActorProvider_RemoveActor_Call {
	return &MockActorProvider_RemoveActor_Call{Call: _e.mock.On("RemoveActor", ctx, ref1)}
}

func (_c *MockActorProvider_RemoveActor_Call) Run(run func(ctx context.Context, ref1 ref.ActorRef)) *MockActorProvider_RemoveActor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ref.ActorRef
		if args[1] != nil {
			arg1 = args[1].(ref.ActorRef)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockActorProvider_RemoveActor_Call) Return(err error) *MockActorProvider_RemoveActor_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockActorProvider_RemoveActor_Call) RunAndReturn(run func(ctx context.Context, ref1 ref.ActorRef) error) *MockActorProvider_RemoveActor_Call {
	_c.Call.Return(run)
	return _c
}

// RenewAlarmLeases provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) RenewAlarmLeases(ctx context.Context, req components.RenewAlarmLeasesReq) (components.RenewAlarmLeasesRes, error) {
	ret := _mock.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for RenewAlarmLeases")
	}

	var r0 components.RenewAlarmLeasesRes
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, components.RenewAlarmLeasesReq) (components.RenewAlarmLeasesRes, error)); ok {
		return returnFunc(ctx, req)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, components.RenewAlarmLeasesReq) components.RenewAlarmLeasesRes); ok {
		r0 = returnFunc(ctx, req)
	} else {
		r0 = ret.Get(0).(components.RenewAlarmLeasesRes)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, components.RenewAlarmLeasesReq) error); ok {
		r1 = returnFunc(ctx, req)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockActorProvider_RenewAlarmLeases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenewAlarmLeases'
type MockActorProvider_RenewAlarmLeases_Call struct {
	*mock.Call
}

// RenewAlarmLeases is a helper method to define mock.On call
//   - ctx context.Context
//   - req components.RenewAlarmLeasesReq
func (_e *MockActorProvider_Expecter) RenewAlarmLeases(ctx interface{}, req interface{}) *MockActorProvider_RenewAlarmLeases_Call {
	return &MockActorProvider_RenewAlarmLeases_Call{Call: _e.mock.On("RenewAlarmLeases", ctx, req)}
}

func (_c *MockActorProvider_RenewAlarmLeases_Call) Run(run func(ctx context.Context, req components.RenewAlarmLeasesReq)) *MockActorProvider_RenewAlarmLeases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 components.RenewAlarmLeasesReq
		if args[1] != nil {
			arg1 = args[1].(components.RenewAlarmLeasesReq)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockActorProvider_RenewAlarmLeases_Call) Return(renewAlarmLeasesRes components.RenewAlarmLeasesRes, err error) *MockActorProvider_RenewAlarmLeases_Call {
	_c.Call.Return(renewAlarmLeasesRes, err)
	return _c
}

func (_c *MockActorProvider_RenewAlarmLeases_Call) RunAndReturn(run func(ctx context.Context, req components.RenewAlarmLeasesReq) (components.RenewAlarmLeasesRes, error)) *MockActorProvider_RenewAlarmLeases_Call {
	_c.Call.Return(run)
	return _c
}

// RenewLeaseInterval provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) RenewLeaseInterval() time.Duration {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for RenewLeaseInterval")
	}

	var r0 time.Duration
	if returnFunc, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}
	return r0
}

// MockActorProvider_RenewLeaseInterval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenewLeaseInterval'
type MockActorProvider_RenewLeaseInterval_Call struct {
	*mock.Call
}

// RenewLeaseInterval is a helper method to define mock.On call
func (_e *MockActorProvider_Expecter) RenewLeaseInterval() *MockActorProvider_RenewLeaseInterval_Call {
	return &MockActorProvider_RenewLeaseInterval_Call{Call: _e.mock.On("RenewLeaseInterval")}
}

func (_c *MockActorProvider_RenewLeaseInterval_Call) Run(run func()) *MockActorProvider_RenewLeaseInterval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockActorProvider_RenewLeaseInterval_Call) Return(duration time.Duration) *MockActorProvider_RenewLeaseInterval_Call {
	_c.Call.Return(duration)
	return _c
}

func (_c *MockActorProvider_RenewLeaseInterval_Call) RunAndReturn(run func() time.Duration) *MockActorProvider_RenewLeaseInterval_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) Run(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockActorProvider_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockActorProvider_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockActorProvider_Expecter) Run(ctx interface{}) *MockActorProvider_Run_Call {
	return &MockActorProvider_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *MockActorProvider_Run_Call) Run(run func(ctx context.Context)) *MockActorProvider_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockActorProvider_Run_Call) Return(err error) *MockActorProvider_Run_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockActorProvider_Run_Call) RunAndReturn(run func(ctx context.Context) error) *MockActorProvider_Run_Call {
	_c.Call.Return(run)
	return _c
}

// SetAlarm provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) SetAlarm(ctx context.Context, ref1 ref.AlarmRef, req components.SetAlarmReq) error {
	ret := _mock.Called(ctx, ref1, req)

	if len(ret) == 0 {
		panic("no return value specified for SetAlarm")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ref.AlarmRef, components.SetAlarmReq) error); ok {
		r0 = returnFunc(ctx, ref1, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockActorProvider_SetAlarm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAlarm'
type MockActorProvider_SetAlarm_Call struct {
	*mock.Call
}

// SetAlarm is a helper method to define mock.On call
//   - ctx context.Context
//   - ref1 ref.AlarmRef
//   - req components.SetAlarmReq
func (_e *MockActorProvider_Expecter) SetAlarm(ctx interface{}, ref1 interface{}, req interface{}) *MockActorProvider_SetAlarm_Call {
	return &MockActorProvider_SetAlarm_Call{Call: _e.mock.On("SetAlarm", ctx, ref1, req)}
}

func (_c *MockActorProvider_SetAlarm_Call) Run(run func(ctx context.Context, ref1 ref.AlarmRef, req components.SetAlarmReq)) *MockActorProvider_SetAlarm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ref.AlarmRef
		if args[1] != nil {
			arg1 = args[1].(ref.AlarmRef)
		}
		var arg2 components.SetAlarmReq
		if args[2] != nil {
			arg2 = args[2].(components.SetAlarmReq)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockActorProvider_SetAlarm_Call) Return(err error) *MockActorProvider_SetAlarm_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockActorProvider_SetAlarm_Call) RunAndReturn(run func(ctx context.Context, ref1 ref.AlarmRef, req components.SetAlarmReq) error) *MockActorProvider_SetAlarm_Call {
	_c.Call.Return(run)
	return _c
}

// SetState provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) SetState(ctx context.Context, ref1 ref.ActorRef, data []byte, opts components.SetStateOpts) error {
	ret := _mock.Called(ctx, ref1, data, opts)

	if len(ret) == 0 {
		panic("no return value specified for SetState")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, ref.ActorRef, []byte, components.SetStateOpts) error); ok {
		r0 = returnFunc(ctx, ref1, data, opts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockActorProvider_SetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetState'
type MockActorProvider_SetState_Call struct {
	*mock.Call
}

// SetState is a helper method to define mock.On call
//   - ctx context.Context
//   - ref1 ref.ActorRef
//   - data []byte
//   - opts components.SetStateOpts
func (_e *MockActorProvider_Expecter) SetState(ctx interface{}, ref1 interface{}, data interface{}, opts interface{}) *MockActorProvider_SetState_Call {
	return &MockActorProvider_SetState_Call{Call: _e.mock.On("SetState", ctx, ref1, data, opts)}
}

func (_c *MockActorProvider_SetState_Call) Run(run func(ctx context.Context, ref1 ref.ActorRef, data []byte, opts components.SetStateOpts)) *MockActorProvider_SetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 ref.ActorRef
		if args[1] != nil {
			arg1 = args[1].(ref.ActorRef)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		var arg3 components.SetStateOpts
		if args[3] != nil {
			arg3 = args[3].(components.SetStateOpts)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockActorProvider_SetState_Call) Return(err error) *MockActorProvider_SetState_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockActorProvider_SetState_Call) RunAndReturn(run func(ctx context.Context, ref1 ref.ActorRef, data []byte, opts components.SetStateOpts) error) *MockActorProvider_SetState_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterHost provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) UnregisterHost(ctx context.Context, hostID string) error {
	ret := _mock.Called(ctx, hostID)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterHost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, hostID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockActorProvider_UnregisterHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterHost'
type MockActorProvider_UnregisterHost_Call struct {
	*mock.Call
}

// UnregisterHost is a helper method to define mock.On call
//   - ctx context.Context
//   - hostID string
func (_e *MockActorProvider_Expecter) UnregisterHost(ctx interface{}, hostID interface{}) *MockActorProvider_UnregisterHost_Call {
	return &MockActorProvider_UnregisterHost_Call{Call: _e.mock.On("UnregisterHost", ctx, hostID)}
}

func (_c *MockActorProvider_UnregisterHost_Call) Run(run func(ctx context.Context, hostID string)) *MockActorProvider_UnregisterHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockActorProvider_UnregisterHost_Call) Return(err error) *MockActorProvider_UnregisterHost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockActorProvider_UnregisterHost_Call) RunAndReturn(run func(ctx context.Context, hostID string) error) *MockActorProvider_UnregisterHost_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateActorHost provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) UpdateActorHost(ctx context.Context, hostID string, req components.UpdateActorHostReq) error {
	ret := _mock.Called(ctx, hostID, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateActorHost")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, components.UpdateActorHostReq) error); ok {
		r0 = returnFunc(ctx, hostID, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockActorProvider_UpdateActorHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateActorHost'
type MockActorProvider_UpdateActorHost_Call struct {
	*mock.Call
}

// UpdateActorHost is a helper method to define mock.On call
//   - ctx context.Context
//   - hostID string
//   - req components.UpdateActorHostReq
func (_e *MockActorProvider_Expecter) UpdateActorHost(ctx interface{}, hostID interface{}, req interface{}) *MockActorProvider_UpdateActorHost_Call {
	return &MockActorProvider_UpdateActorHost_Call{Call: _e.mock.On("UpdateActorHost", ctx, hostID, req)}
}

func (_c *MockActorProvider_UpdateActorHost_Call) Run(run func(ctx context.Context, hostID string, req components.UpdateActorHostReq)) *MockActorProvider_UpdateActorHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 components.UpdateActorHostReq
		if args[2] != nil {
			arg2 = args[2].(components.UpdateActorHostReq)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockActorProvider_UpdateActorHost_Call) Return(err error) *MockActorProvider_UpdateActorHost_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockActorProvider_UpdateActorHost_Call) RunAndReturn(run func(ctx context.Context, hostID string, req components.UpdateActorHostReq) error) *MockActorProvider_UpdateActorHost_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLeasedAlarm provides a mock function for the type MockActorProvider
func (_mock *MockActorProvider) UpdateLeasedAlarm(ctx context.Context, lease *ref.AlarmLease, req components.UpdateLeasedAlarmReq) error {
	ret := _mock.Called(ctx, lease, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLeasedAlarm")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *ref.AlarmLease, components.UpdateLeasedAlarmReq) error); ok {
		r0 = returnFunc(ctx, lease, req)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockActorProvider_UpdateLeasedAlarm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLeasedAlarm'
type MockActorProvider_UpdateLeasedAlarm_Call struct {
	*mock.Call
}

// UpdateLeasedAlarm is a helper method to define mock.On call
//   - ctx context.Context
//   - lease *ref.AlarmLease
//   - req components.UpdateLeasedAlarmReq
func (_e *MockActorProvider_Expecter) UpdateLeasedAlarm(ctx interface{}, lease interface{}, req interface{}) *MockActorProvider_UpdateLeasedAlarm_Call {
	return &MockActorProvider_UpdateLeasedAlarm_Call{Call: _e.mock.On("UpdateLeasedAlarm", ctx, lease, req)}
}

func (_c *MockActorProvider_UpdateLeasedAlarm_Call) Run(run func(ctx context.Context, lease *ref.AlarmLease, req components.UpdateLeasedAlarmReq)) *MockActorProvider_UpdateLeasedAlarm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *ref.AlarmLease
		if args[1] != nil {
			arg1 = args[1].(*ref.AlarmLease)
		}
		var arg2 components.UpdateLeasedAlarmReq
		if args[2] != nil {
			arg2 = args[2].(components.UpdateLeasedAlarmReq)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockActorProvider_UpdateLeasedAlarm_Call) Return(err error) *MockActorProvider_UpdateLeasedAlarm_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockActorProvider_UpdateLeasedAlarm_Call) RunAndReturn(run func(ctx context.Context, lease *ref.AlarmLease, req components.UpdateLeasedAlarmReq) error) *MockActorProvider_UpdateLeasedAlarm_Call {
	_c.Call.Return(run)
	return _c
}
