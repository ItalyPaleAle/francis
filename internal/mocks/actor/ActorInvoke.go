//go:build unit

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package actor_mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewMockActorInvoke creates a new instance of MockActorInvoke. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockActorInvoke(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockActorInvoke {
	mock := &MockActorInvoke{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockActorInvoke is an autogenerated mock type for the ActorInvoke type
type MockActorInvoke struct {
	mock.Mock
}

type MockActorInvoke_Expecter struct {
	mock *mock.Mock
}

func (_m *MockActorInvoke) EXPECT() *MockActorInvoke_Expecter {
	return &MockActorInvoke_Expecter{mock: &_m.Mock}
}

// Invoke provides a mock function for the type MockActorInvoke
func (_mock *MockActorInvoke) Invoke(ctx context.Context, method string, data any) (any, error) {
	ret := _mock.Called(ctx, method, data)

	if len(ret) == 0 {
		panic("no return value specified for Invoke")
	}

	var r0 any
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any) (any, error)); ok {
		return returnFunc(ctx, method, data)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, any) any); ok {
		r0 = returnFunc(ctx, method, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, any) error); ok {
		r1 = returnFunc(ctx, method, data)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockActorInvoke_Invoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invoke'
type MockActorInvoke_Invoke_Call struct {
	*mock.Call
}

// Invoke is a helper method to define mock.On call
//   - ctx context.Context
//   - method string
//   - data any
func (_e *MockActorInvoke_Expecter) Invoke(ctx interface{}, method interface{}, data interface{}) *MockActorInvoke_Invoke_Call {
	return &MockActorInvoke_Invoke_Call{Call: _e.mock.On("Invoke", ctx, method, data)}
}

func (_c *MockActorInvoke_Invoke_Call) Run(run func(ctx context.Context, method string, data any)) *MockActorInvoke_Invoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 any
		if args[2] != nil {
			arg2 = args[2].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockActorInvoke_Invoke_Call) Return(v any, err error) *MockActorInvoke_Invoke_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockActorInvoke_Invoke_Call) RunAndReturn(run func(ctx context.Context, method string, data any) (any, error)) *MockActorInvoke_Invoke_Call {
	_c.Call.Return(run)
	return _c
}
