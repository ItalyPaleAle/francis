//go:build unit

// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package actor_mocks

import (
	"context"

	"github.com/italypaleale/actors/actor"
	mock "github.com/stretchr/testify/mock"
)

// NewMockHost creates a new instance of MockHost. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHost(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHost {
	mock := &MockHost{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHost is an autogenerated mock type for the Host type
type MockHost struct {
	mock.Mock
}

type MockHost_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHost) EXPECT() *MockHost_Expecter {
	return &MockHost_Expecter{mock: &_m.Mock}
}

// DeleteAlarm provides a mock function for the type MockHost
func (_mock *MockHost) DeleteAlarm(ctx context.Context, actorType string, actorID string, name string) error {
	ret := _mock.Called(ctx, actorType, actorID, name)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlarm")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = returnFunc(ctx, actorType, actorID, name)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHost_DeleteAlarm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAlarm'
type MockHost_DeleteAlarm_Call struct {
	*mock.Call
}

// DeleteAlarm is a helper method to define mock.On call
//   - ctx context.Context
//   - actorType string
//   - actorID string
//   - name string
func (_e *MockHost_Expecter) DeleteAlarm(ctx interface{}, actorType interface{}, actorID interface{}, name interface{}) *MockHost_DeleteAlarm_Call {
	return &MockHost_DeleteAlarm_Call{Call: _e.mock.On("DeleteAlarm", ctx, actorType, actorID, name)}
}

func (_c *MockHost_DeleteAlarm_Call) Run(run func(ctx context.Context, actorType string, actorID string, name string)) *MockHost_DeleteAlarm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockHost_DeleteAlarm_Call) Return(err error) *MockHost_DeleteAlarm_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHost_DeleteAlarm_Call) RunAndReturn(run func(ctx context.Context, actorType string, actorID string, name string) error) *MockHost_DeleteAlarm_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteState provides a mock function for the type MockHost
func (_mock *MockHost) DeleteState(ctx context.Context, actorType string, actorID string) error {
	ret := _mock.Called(ctx, actorType, actorID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteState")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = returnFunc(ctx, actorType, actorID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHost_DeleteState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteState'
type MockHost_DeleteState_Call struct {
	*mock.Call
}

// DeleteState is a helper method to define mock.On call
//   - ctx context.Context
//   - actorType string
//   - actorID string
func (_e *MockHost_Expecter) DeleteState(ctx interface{}, actorType interface{}, actorID interface{}) *MockHost_DeleteState_Call {
	return &MockHost_DeleteState_Call{Call: _e.mock.On("DeleteState", ctx, actorType, actorID)}
}

func (_c *MockHost_DeleteState_Call) Run(run func(ctx context.Context, actorType string, actorID string)) *MockHost_DeleteState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockHost_DeleteState_Call) Return(err error) *MockHost_DeleteState_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHost_DeleteState_Call) RunAndReturn(run func(ctx context.Context, actorType string, actorID string) error) *MockHost_DeleteState_Call {
	_c.Call.Return(run)
	return _c
}

// GetAlarm provides a mock function for the type MockHost
func (_mock *MockHost) GetAlarm(ctx context.Context, actorType string, actorID string, name string) (actor.AlarmProperties, error) {
	ret := _mock.Called(ctx, actorType, actorID, name)

	if len(ret) == 0 {
		panic("no return value specified for GetAlarm")
	}

	var r0 actor.AlarmProperties
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) (actor.AlarmProperties, error)); ok {
		return returnFunc(ctx, actorType, actorID, name)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string) actor.AlarmProperties); ok {
		r0 = returnFunc(ctx, actorType, actorID, name)
	} else {
		r0 = ret.Get(0).(actor.AlarmProperties)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = returnFunc(ctx, actorType, actorID, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockHost_GetAlarm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAlarm'
type MockHost_GetAlarm_Call struct {
	*mock.Call
}

// GetAlarm is a helper method to define mock.On call
//   - ctx context.Context
//   - actorType string
//   - actorID string
//   - name string
func (_e *MockHost_Expecter) GetAlarm(ctx interface{}, actorType interface{}, actorID interface{}, name interface{}) *MockHost_GetAlarm_Call {
	return &MockHost_GetAlarm_Call{Call: _e.mock.On("GetAlarm", ctx, actorType, actorID, name)}
}

func (_c *MockHost_GetAlarm_Call) Run(run func(ctx context.Context, actorType string, actorID string, name string)) *MockHost_GetAlarm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockHost_GetAlarm_Call) Return(alarmProperties actor.AlarmProperties, err error) *MockHost_GetAlarm_Call {
	_c.Call.Return(alarmProperties, err)
	return _c
}

func (_c *MockHost_GetAlarm_Call) RunAndReturn(run func(ctx context.Context, actorType string, actorID string, name string) (actor.AlarmProperties, error)) *MockHost_GetAlarm_Call {
	_c.Call.Return(run)
	return _c
}

// GetState provides a mock function for the type MockHost
func (_mock *MockHost) GetState(ctx context.Context, actorType string, actorID string, dest any) error {
	ret := _mock.Called(ctx, actorType, actorID, dest)

	if len(ret) == 0 {
		panic("no return value specified for GetState")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, any) error); ok {
		r0 = returnFunc(ctx, actorType, actorID, dest)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHost_GetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetState'
type MockHost_GetState_Call struct {
	*mock.Call
}

// GetState is a helper method to define mock.On call
//   - ctx context.Context
//   - actorType string
//   - actorID string
//   - dest any
func (_e *MockHost_Expecter) GetState(ctx interface{}, actorType interface{}, actorID interface{}, dest interface{}) *MockHost_GetState_Call {
	return &MockHost_GetState_Call{Call: _e.mock.On("GetState", ctx, actorType, actorID, dest)}
}

func (_c *MockHost_GetState_Call) Run(run func(ctx context.Context, actorType string, actorID string, dest any)) *MockHost_GetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 any
		if args[3] != nil {
			arg3 = args[3].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockHost_GetState_Call) Return(err error) *MockHost_GetState_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHost_GetState_Call) RunAndReturn(run func(ctx context.Context, actorType string, actorID string, dest any) error) *MockHost_GetState_Call {
	_c.Call.Return(run)
	return _c
}

// Halt provides a mock function for the type MockHost
func (_mock *MockHost) Halt(actorType string, actorID string) error {
	ret := _mock.Called(actorType, actorID)

	if len(ret) == 0 {
		panic("no return value specified for Halt")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(actorType, actorID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHost_Halt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Halt'
type MockHost_Halt_Call struct {
	*mock.Call
}

// Halt is a helper method to define mock.On call
//   - actorType string
//   - actorID string
func (_e *MockHost_Expecter) Halt(actorType interface{}, actorID interface{}) *MockHost_Halt_Call {
	return &MockHost_Halt_Call{Call: _e.mock.On("Halt", actorType, actorID)}
}

func (_c *MockHost_Halt_Call) Run(run func(actorType string, actorID string)) *MockHost_Halt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockHost_Halt_Call) Return(err error) *MockHost_Halt_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHost_Halt_Call) RunAndReturn(run func(actorType string, actorID string) error) *MockHost_Halt_Call {
	_c.Call.Return(run)
	return _c
}

// HaltAll provides a mock function for the type MockHost
func (_mock *MockHost) HaltAll() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for HaltAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHost_HaltAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HaltAll'
type MockHost_HaltAll_Call struct {
	*mock.Call
}

// HaltAll is a helper method to define mock.On call
func (_e *MockHost_Expecter) HaltAll() *MockHost_HaltAll_Call {
	return &MockHost_HaltAll_Call{Call: _e.mock.On("HaltAll")}
}

func (_c *MockHost_HaltAll_Call) Run(run func()) *MockHost_HaltAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockHost_HaltAll_Call) Return(err error) *MockHost_HaltAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHost_HaltAll_Call) RunAndReturn(run func() error) *MockHost_HaltAll_Call {
	_c.Call.Return(run)
	return _c
}

// Invoke provides a mock function for the type MockHost
func (_mock *MockHost) Invoke(ctx context.Context, actorType string, actorID string, method string, data any, out any) error {
	ret := _mock.Called(ctx, actorType, actorID, method, data, out)

	if len(ret) == 0 {
		panic("no return value specified for Invoke")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, any, any) error); ok {
		r0 = returnFunc(ctx, actorType, actorID, method, data, out)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHost_Invoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invoke'
type MockHost_Invoke_Call struct {
	*mock.Call
}

// Invoke is a helper method to define mock.On call
//   - ctx context.Context
//   - actorType string
//   - actorID string
//   - method string
//   - data any
//   - out any
func (_e *MockHost_Expecter) Invoke(ctx interface{}, actorType interface{}, actorID interface{}, method interface{}, data interface{}, out interface{}) *MockHost_Invoke_Call {
	return &MockHost_Invoke_Call{Call: _e.mock.On("Invoke", ctx, actorType, actorID, method, data, out)}
}

func (_c *MockHost_Invoke_Call) Run(run func(ctx context.Context, actorType string, actorID string, method string, data any, out any)) *MockHost_Invoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 any
		if args[4] != nil {
			arg4 = args[4].(any)
		}
		var arg5 any
		if args[5] != nil {
			arg5 = args[5].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockHost_Invoke_Call) Return(err error) *MockHost_Invoke_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHost_Invoke_Call) RunAndReturn(run func(ctx context.Context, actorType string, actorID string, method string, data any, out any) error) *MockHost_Invoke_Call {
	_c.Call.Return(run)
	return _c
}

// SetAlarm provides a mock function for the type MockHost
func (_mock *MockHost) SetAlarm(ctx context.Context, actorType string, actorID string, name string, properties actor.AlarmProperties) error {
	ret := _mock.Called(ctx, actorType, actorID, name, properties)

	if len(ret) == 0 {
		panic("no return value specified for SetAlarm")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, actor.AlarmProperties) error); ok {
		r0 = returnFunc(ctx, actorType, actorID, name, properties)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHost_SetAlarm_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAlarm'
type MockHost_SetAlarm_Call struct {
	*mock.Call
}

// SetAlarm is a helper method to define mock.On call
//   - ctx context.Context
//   - actorType string
//   - actorID string
//   - name string
//   - properties actor.AlarmProperties
func (_e *MockHost_Expecter) SetAlarm(ctx interface{}, actorType interface{}, actorID interface{}, name interface{}, properties interface{}) *MockHost_SetAlarm_Call {
	return &MockHost_SetAlarm_Call{Call: _e.mock.On("SetAlarm", ctx, actorType, actorID, name, properties)}
}

func (_c *MockHost_SetAlarm_Call) Run(run func(ctx context.Context, actorType string, actorID string, name string, properties actor.AlarmProperties)) *MockHost_SetAlarm_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 actor.AlarmProperties
		if args[4] != nil {
			arg4 = args[4].(actor.AlarmProperties)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockHost_SetAlarm_Call) Return(err error) *MockHost_SetAlarm_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHost_SetAlarm_Call) RunAndReturn(run func(ctx context.Context, actorType string, actorID string, name string, properties actor.AlarmProperties) error) *MockHost_SetAlarm_Call {
	_c.Call.Return(run)
	return _c
}

// SetState provides a mock function for the type MockHost
func (_mock *MockHost) SetState(ctx context.Context, actorType string, actorID string, state any) error {
	ret := _mock.Called(ctx, actorType, actorID, state)

	if len(ret) == 0 {
		panic("no return value specified for SetState")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, any) error); ok {
		r0 = returnFunc(ctx, actorType, actorID, state)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockHost_SetState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetState'
type MockHost_SetState_Call struct {
	*mock.Call
}

// SetState is a helper method to define mock.On call
//   - ctx context.Context
//   - actorType string
//   - actorID string
//   - state any
func (_e *MockHost_Expecter) SetState(ctx interface{}, actorType interface{}, actorID interface{}, state interface{}) *MockHost_SetState_Call {
	return &MockHost_SetState_Call{Call: _e.mock.On("SetState", ctx, actorType, actorID, state)}
}

func (_c *MockHost_SetState_Call) Run(run func(ctx context.Context, actorType string, actorID string, state any)) *MockHost_SetState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 any
		if args[3] != nil {
			arg3 = args[3].(any)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockHost_SetState_Call) Return(err error) *MockHost_SetState_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockHost_SetState_Call) RunAndReturn(run func(ctx context.Context, actorType string, actorID string, state any) error) *MockHost_SetState_Call {
	_c.Call.Return(run)
	return _c
}
